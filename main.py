from aiogram.dispatcher.filters import Text
from bestchange_api import BestChange

from bestchange_listener import get_cots
from config import *
from aiogram import Bot, Dispatcher, executor, types
from binance_connect import start_listening
from keyboards import *
from States import StatesChange
from aiogram.contrib.fsm_storage.memory import MemoryStorage

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())


def main():
    executor.start_polling(dp)


@dp.message_handler(commands=["start"])
async def start(message: types.Message):
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –∫–æ—Ç–æ—Ä—ã–π —Å–∫–∞–Ω–∏—Ä—É–µ—Ç –ë–µ—Å—Ç—á–µ–Ω–¥–∂ –∏ –ë–∏–Ω–∞–Ω—Å, –Ω–∞—Ö–æ–¥—è —Å–≤—è–∑–∫–∏",
                         reply_markup=keyboard_main)


@dp.callback_query_handler(lambda c: c.data and c.data.startswith('change'))
async def process_change(callback_query: types.CallbackQuery):
    regime = callback_query.data[7:]
    state = dp.current_state(chat=callback_query.message.chat.id, user=callback_query.from_user.id)
    if regime == "value":
        await bot.send_message(callback_query.from_user.id,
                               text="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ä–∞–±–æ—á—É—é —Å—É–º–º—É:")
        await state.set_state(StatesChange.STATE_VALUE)

    if regime == "min_spread":
        await bot.send_message(callback_query.from_user.id,
                               text="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å:")
        await state.set_state(StatesChange.STATE_SPREAD)
    if regime == "min_good":
        await bot.send_message(callback_query.from_user.id,
                               text="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ —Ö–æ—Ä–æ—à–∏—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤:")
        await state.set_state(StatesChange.STATE_MIN_GOOD)
    if regime == "max_bad":
        await bot.send_message(callback_query.from_user.id,
                               text="–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–ª–æ—Ö–∏—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤:")
        await state.set_state(StatesChange.STATE_MAX_BAD)
    await callback_query.message.delete()


@dp.callback_query_handler(lambda c: c.data and c.data.startswith('change'), state=StatesChange.STATE_EMPTY)
async def process_change1(callback_query: types.CallbackQuery):
    await process_change(callback_query)


@dp.message_handler(Text(equals="–ù–∞—Å—Ç—Ä–æ–π–∫–∏‚öôÔ∏è"))
async def parameters_get(message: types.Message):
    temp_text = "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ –Ω–∞ —Å–µ–π—á–∞—Å:\n" \
                "–°—É–º–º–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã: {} USDT\n" \
                "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {}%\n" \
                "–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª-–≤–æ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {}\n" \
                "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª-–≤–æ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {}"
    temp_text = temp_text.format(parameters["value"],
                                 parameters["min_spread"],
                                 parameters["min_good"],
                                 parameters["max_bad"])
    await message.answer(temp_text, reply_markup=keyboard_inline_properties)


@dp.message_handler(Text(equals="–û–±–Ω–æ–≤–∏—Ç—åüîÉ"))
async def update_get(message: types.Message):
    await message.answer("–ù–∞—á–∏–Ω–∞—é –ø–æ–∏—Å–∫ —Å–≤—è–∑–æ–∫, —ç—Ç–æ –∑–∞–π–º–µ—Ç –æ–∫–æ–ª–æ –º–∏–Ω—É—Ç—ã")
    text = "–ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω üòÅ"
    text_quote = "1. USDT->{}\n" \
                 "–ü–æ–∫—É–ø–∫–∞ –ø–æ –º–∞—Ä–∫–µ—Ç—É –∑–∞: {}\n" \
                 "2. {}->{}\n" \
                 "–ö—É—Ä—Å –æ–±–º–µ–Ω–∞: {} {} –Ω–∞ {} {}\n" \
                 "–°—Å—ã–ª–∫–∞ –Ω–∞ –æ–±–º–µ–Ω–Ω–∏–∫: {}\n" \
                 "3. {}->USDT\n" \
                 "–ü—Ä–æ–¥–∞–∂–∞ –ø–æ –º–∞—Ä–∫–µ—Ç—É: {}\n\n" \
                 "–ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞: {} USDT\n" \
                 "–ü—Ä–æ—Ü–µ–Ω—Ç–Ω—ã–π —Å–ø—Ä–µ–¥: {}%"

    cotirs = get_cots()
    if len(cotirs) == 0:
        text = "–ù–µ –Ω–∞–π–¥–µ–Ω—ã —Å–≤—è–∑–∫–∏ üò•"
    else:
        for i in cotirs:
            await message.answer(text_quote.format(
                i['from'], i['buy'],
                i['from'], i['to'],
                i['give'], i['from'], i['get'], i['to'],
                i['link'],
                i['to'], i['sell'],
                i['spread_abs'], i['spread_proc']
            ))

    await message.answer(text)


@dp.message_handler(Text(equals="–ù–∞—Å—Ç—Ä–æ–π–∫–∏‚öôÔ∏è"), state=StatesChange.STATE_EMPTY)
async def parameters_get1(message: types.Message):
    await parameters_get(message)


@dp.message_handler(Text(equals="–û–±–Ω–æ–≤–∏—Ç—åüîÉ"), state=StatesChange.STATE_EMPTY)
async def update_get1(message: types.Message):
    await update_get(message)


@dp.message_handler(state=StatesChange.STATE_VALUE)
async def process_value_change(message: types.Message):
    parameters["value"] = int(message.text)
    state = dp.current_state(chat=message.chat.id, user=message.from_user.id)
    await state.set_state(StatesChange.STATE_EMPTY)
    await parameters_get(message)


@dp.message_handler(state=StatesChange.STATE_SPREAD)
async def process_value_change(message: types.Message):
    parameters["min_spread"] = float(message.text)
    state = dp.current_state(chat=message.chat.id, user=message.from_user.id)
    await state.set_state(StatesChange.STATE_EMPTY)
    await parameters_get(message)


@dp.message_handler(state=StatesChange.STATE_MIN_GOOD)
async def process_value_change(message: types.Message):
    parameters["min_good"] = int(message.text)
    state = dp.current_state(chat=message.chat.id, user=message.from_user.id)
    await state.set_state(StatesChange.STATE_EMPTY)
    await parameters_get(message)


@dp.message_handler(state=StatesChange.STATE_MAX_BAD)
async def process_value_change(message: types.Message):
    parameters["max_bad"] = int(message.text)
    state = dp.current_state(chat=message.chat.id, user=message.from_user.id)
    await state.set_state(StatesChange.STATE_EMPTY)
    await parameters_get(message)


@dp.message_handler(state=StatesChange.STATE_EMPTY)
async def echo(message: types.Message):
    await message.answer("–ù–µ –∑–Ω–∞—é —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã =(")


if __name__ == '__main__':
    start_listening()
    main()
